<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HubblePOS.Factory</name>
    </assembly>
    <members>
        <member name="M:HubblePOS.Factory.ValidationHelper.ValidateObjectNotNull(System.Object,System.String)">
            <summary>
            Valida que el objeto no sea nulo
            </summary>
            <param name="o">Objeto</param>
            <exception cref="T:HubblePOS.Factory.ValidationException"></exception>
        </member>
        <member name="M:HubblePOS.Factory.ValidationHelper.ValidateInterfaceToClassMappingDataDictionary(System.Collections.Generic.IDictionary{System.Type,HubblePOS.Factory.FactoryInstantiableData})">
            <summary>
            Valida el mapping interfaz-clase_instanciación representada por el diccionario de entrada
            </summary>
            <param name="interfaceToClassMappingDataDictionary">mapping contrado deseado a datos para instanciar clase a validar</param>
            <exception cref="T:HubblePOS.Factory.ValidationException"></exception>
        </member>
        <member name="M:HubblePOS.Factory.ValidationHelper.ValidateInterfaceToClassData(System.Type,HubblePOS.Factory.FactoryInstantiableData)">
            <summary>
            Valida los datos de un item de configuración para instanciación, es decir,
            los datos de una relación entre interfaz objetivo y datos para instanciar un objeto que lo cumpla
            </summary>
            <param name="interfaceToComplain">Tipo de una interfaz objetivo</param>
            <param name="instantiableData">Datos para la instanciación de un objeto que cumpla la interfaz</param>
            <exception cref="T:HubblePOS.Factory.ValidationException"></exception>
        </member>
        <member name="M:HubblePOS.Factory.Factory.Initialize">
            <summary>
            Inicializa esta instancia de manera asíncrona.
            </summary>
        </member>
        <member name="M:HubblePOS.Factory.Factory.CreateAsync">
            <summary>
            Crea esta instancia de manera asíncrona
            </summary>
        </member>
        <member name="M:HubblePOS.Factory.Factory.CreateInstanceFromInterface``1">
            <summary>
            Construye y devuelve una instancia que cumple la interfaz especificada
            </summary>
            <typeparam name="T">Interface (p.ej: IProductBC)</typeparam>
            <returns>Objeto que cumple la interfaz</returns>
            <exception cref="T:HubblePOS.Factory.ValidationException"></exception>
            <exception cref="T:HubblePOS.Factory.InterfaceNotExistsException"></exception>
            <exception cref="T:HubblePOS.Factory.GenericErrorException"></exception>
        </member>
        <member name="M:HubblePOS.Factory.Factory.CreateInstanceFromInterface``1(System.String)">
            <summary>
            Construye y devuelve una instancia que cumple la interfaz especificada
            </summary>
            <typeparam name="T">Interface (p.ej: IProductBC)</typeparam>
            <param name="instantiationSupportToken">[Opcional] Token de soporte para poder resolver una instanciación condicional</param>
            <returns>Objeto que cumple la interfaz</returns>
            <exception cref="T:HubblePOS.Factory.ValidationException"></exception>
            <exception cref="T:HubblePOS.Factory.InterfaceNotExistsException"></exception>
            <exception cref="T:HubblePOS.Factory.GenericErrorException"></exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:HubblePOS.Factory.Factory.CreateInstancesFromAllClassesThatImplementInterface``1" -->
        <member name="M:HubblePOS.Factory.Factory.AddOrUpdateInterfaceToClassMapping(System.Type,HubblePOS.Factory.FactoryInstantiableData)">
            <summary>
            Añade o actualiza una relación interfaz-clase en el mapping
            </summary>
            <param name="interfaceToComplain">Interfaz a cumplir</param>
            <param name="compliantClassData">Clase que cumple la interfaz, más los parámetros necesarios para inicializarla correctamente</param>
            <exception cref="T:HubblePOS.Factory.ValidationException"></exception>
            <exception cref="T:HubblePOS.Factory.GenericErrorException"></exception>
        </member>
        <member name="M:HubblePOS.Factory.Factory.AddOrUpdateInterfaceToClassMapping(System.Collections.Generic.IDictionary{System.Type,HubblePOS.Factory.FactoryInstantiableData})">
            <summary>
            Añade o actualiza el mapping de relaciones interfaz-datos_instanciación
            de la factoría con las relaciones indicadas en el diccionario de entreda
            </summary>
            <param name="interfaceToClassMappingDataDictionary">Diccionario con las relaciones interfaz-datos_instanciación</param>
            <exception cref="T:HubblePOS.Factory.ValidationException"></exception>
            <exception cref="T:HubblePOS.Factory.GenericErrorException"></exception>
        </member>
        <member name="M:HubblePOS.Factory.Factory.ClearInterfaceToClassMapping">
            <summary>
            Elimina todo el mapping actual. La factoría no podrá devolver instancias a partir de interfaces a no ser que se añada mapping nuevo
            </summary>
            <exception cref="T:HubblePOS.Factory.GenericErrorException"></exception>
        </member>
        <member name="M:HubblePOS.Factory.Factory.CreateInstanceFromInterface``1(System.Type,System.String)">
            <summary>
            Construye y devuelve una instancia que cumple la interfaz especificada
            </summary>
            <typeparam name="T">Interface (p.ej: IProductBC)</typeparam>
            <param name="askingForInstanceClassType">El tipo de la clase que ha solicitado la instanciación a la factoría</param>
            <param name="instantiationSupportToken">[Opcional] Token de soporte para poder resolver una instanciación condicional</param>
            <returns>Objeto que cumple la interfaz</returns>
            <exception cref="T:HubblePOS.Factory.ValidationException"></exception>
            <exception cref="T:HubblePOS.Factory.InterfaceNotExistsException"></exception>
            <exception cref="T:HubblePOS.Factory.GenericErrorException"></exception>
        </member>
        <member name="M:HubblePOS.Factory.IFactory.CreateInstanceFromInterface``1">
            <summary>
            Construye y devuelve una instancia que cumple la interfaz especificada
            </summary>
            <typeparam name="T">Interface (p.ej: IProductBC)</typeparam>
            <returns>Objeto que cumple la interfaz</returns>
            <exception cref="T:HubblePOS.Factory.ValidationException"></exception>
            <exception cref="T:HubblePOS.Factory.InterfaceNotExistsException"></exception>
            <exception cref="T:HubblePOS.Factory.GenericErrorException"></exception>
        </member>
        <member name="M:HubblePOS.Factory.IFactory.CreateInstanceFromInterface``1(System.String)">
            <summary>
            Construye y devuelve una instancia que cumple la interfaz especificada
            </summary>
            <typeparam name="T">Interface (p.ej: IProductBC)</typeparam>
            <param name="instantiationSupportToken">[Opcional] Token de soporte para poder resolver una instanciación condicional</param>
            <returns>Objeto que cumple la interfaz</returns>
            <exception cref="T:HubblePOS.Factory.ValidationException"></exception>
            <exception cref="T:HubblePOS.Factory.InterfaceNotExistsException"></exception>
            <exception cref="T:HubblePOS.Factory.GenericErrorException"></exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:HubblePOS.Factory.IFactory.CreateInstancesFromAllClassesThatImplementInterface``1" -->
        <member name="M:HubblePOS.Factory.IFactoryManagement.AddOrUpdateInterfaceToClassMapping(System.Type,HubblePOS.Factory.FactoryInstantiableData)">
            <summary>
            Añade o actualiza una relación interfaz-clase en el mapping
            </summary>
            <param name="interfaceToComplain">Interfaz a cumplir</param>
            <param name="compliantClassData">Clase que cumple la interfaz, más los parámetros necesarios para inicializarla correctamente</param>
            <exception cref="T:HubblePOS.Factory.ValidationException"></exception>
            <exception cref="T:HubblePOS.Factory.GenericErrorException"></exception>
        </member>
        <member name="M:HubblePOS.Factory.IFactoryManagement.AddOrUpdateInterfaceToClassMapping(System.Collections.Generic.IDictionary{System.Type,HubblePOS.Factory.FactoryInstantiableData})">
            <summary>
            Añade o actualiza el mapping de relaciones interfaz-datos_instanciación
            de la factoría con las relaciones indicadas en el diccionario de entreda
            </summary>
            <param name="interfaceToClassMappingDataDictionary">Diccionario con las relaciones interfaz-datos_instanciación</param>
            <exception cref="T:HubblePOS.Factory.ValidationException"></exception>
            <exception cref="T:HubblePOS.Factory.GenericErrorException"></exception>
        </member>
        <member name="M:HubblePOS.Factory.IFactoryManagement.ClearInterfaceToClassMapping">
            <summary>
            Elimina todo el mapping actual. La factoría no podrá devolver instancias a partir de interfaces a no ser que se añada mapping nuevo
            </summary>
            <exception cref="T:HubblePOS.Factory.GenericErrorException"></exception>
        </member>
        <member name="P:HubblePOS.Factory.FactoryInstantiableBase.Factory">
            <summary>
            Factoría a utilizar por esta instancia para la instanciación de otros componentes (BC, DAC)
            </summary>
        </member>
        <member name="M:HubblePOS.Factory.FactoryInstantiableBase.#ctor(System.Collections.Generic.IList{HubblePOS.Factory.FactoryInstantiableParamBase})">
            <summary>
            Constructor sobrecargado.
            </summary>
            <param name="paramList">Parámetros de configuración para la instancia</param>
        </member>
        <member name="M:HubblePOS.Factory.FactoryInstantiableBase.AssimilateParamList(System.Collections.Generic.IList{HubblePOS.Factory.FactoryInstantiableParamBase})">
            <summary>
            Aplica la lista de parámetros para configurar correctamente la instancia y que entre en un estado funcional
            </summary>
        </member>
        <member name="M:HubblePOS.Factory.FactoryInstantiableBase.EnsureProperlyInitialized">
            <summary>
            Valida que la instancia ha sido correctamente inicializada. Es decir, se le han pasado y aplicado todos los parámetros necesarios
            </summary>
            <exception cref="T:HubblePOS.Factory.LackOfConfigurationException"></exception>
        </member>
        <member name="P:HubblePOS.Factory.FactoryInstantiableConfigurationItemConditional.PredicateToAccomplish">
            <summary>
            Predicado a satisfacer para tener en cuenta los datos de configuración representados por este item.
            No debe lanzar excepciones.
            
            Entrada al predicado:
            + Type [Opcional]: clase que solicita la instancia. Nulo si no se desea especificar una
            + string [Opcional]: token de soporte a la decisión. Puede tener sentido para la lógica del predicado. Nulo si no se desea especificar uno
            Retorna:
            + bool: indicando si el predicado se ha satisfecho o no
            </summary>
        </member>
        <member name="M:HubblePOS.Factory.FactoryInstantiableConfigurationItemConditional.#ctor(System.Func{System.Type,System.String,System.Threading.Tasks.Task{System.Boolean}},System.Type,System.Collections.Generic.IList{HubblePOS.Factory.FactoryInstantiableParamBase})">
            <summary>
            Construye un objeto de configuración para instanciación condicional. 
            </summary>
            <param name="predicateToAccomplish">
                Predicado a satisfacer para dar paso a la instanciación. 
                No debe lanzar excepciones.
            
                Entrada al predicado:
                + Type [Opcional]: clase que solicita la instancia. Nulo si no se desea especificar una
                + string [Opcional]: token de soporte a la decisión. Puede tener sentido para la lógica del predicado. Nulo si no se desea especificar uno
                Retorna:
                + bool: indicando si el predicado se ha satisfecho o no
            </param>
            <param name="classTypeToInstantiate"></param>
            <param name="paramsToInitializeInstance"></param>
        </member>
        <member name="T:HubblePOS.Factory.FactoryInstantiableData">
            <summary>
            Representa todos los datos necesarios para poder instanciar una clase mediante la factoría
            </summary>
        </member>
        <member name="P:HubblePOS.Factory.FactoryInstantiableData.OrderedInstatiableDataItemList">
            <summary>
            Lista de items de configuración, ordenada por la prioridad (mayor a menor) en la que han de ser evaluados,
            donde cada uno indica la clase a instanciar y los parámetros para inicializar la instancia
            </summary>
        </member>
        <member name="M:HubblePOS.Factory.FactoryInstantiableData.#ctor(System.Type,System.Collections.Generic.IList{HubblePOS.Factory.FactoryInstantiableParamBase})">
            <summary>
            Constructor para soportar el caso usual: 
            se indica una clase concreta a instanciar (sin toma de decisión condicional)
            </summary>
            <param name="classTypeToInstantiate">Clase a instanciar</param>
            <param name="paramsToInitializeInstance">Parámetros para inicializar el objeto</param>
        </member>
        <member name="M:HubblePOS.Factory.FactoryInstantiableData.#ctor(System.Func{System.Type,System.String,System.Threading.Tasks.Task{System.Boolean}},System.Type,System.Collections.Generic.IList{HubblePOS.Factory.FactoryInstantiableParamBase})">
            <summary>
            Constructor para soportar un único caso, y que es condicional: 
            la instanciación dependerá del cumplimiento de un predicado, que se evaluará en tiempo de instanciación.
            El cumplimiento del predicado llevará dará luz verde a la instanciación con la configuración indicada.
            El fallo del predicado supondrá el fallo de la instanciación. 
            </summary>
            <param name="predicateToAccomplish">Predicado que debe satisfacerse en tiempo de instanciación</param>
            <param name="classTypeToInstantiate">Clase a instanciar, si se satisface el predicado</param>
            <param name="paramsToInitializeInstance">Parámetros para inicializar el objeto, si se satisface el predicado</param>
        </member>
        <member name="M:HubblePOS.Factory.FactoryInstantiableData.#ctor(System.Func{System.Type,System.String,System.Threading.Tasks.Task{System.Boolean}},System.Type,System.Collections.Generic.IList{HubblePOS.Factory.FactoryInstantiableParamBase},System.Func{System.Type,System.String,System.Threading.Tasks.Task{System.Boolean}},System.Type,System.Collections.Generic.IList{HubblePOS.Factory.FactoryInstantiableParamBase},System.Func{System.Type,System.String,System.Threading.Tasks.Task{System.Boolean}},System.Type,System.Collections.Generic.IList{HubblePOS.Factory.FactoryInstantiableParamBase},System.Type,System.Collections.Generic.IList{HubblePOS.Factory.FactoryInstantiableParamBase})">
            <summary>
            Constructor para facilitar el soporte de hasta tres configuraciones condicionales y una fija por defecto: 
            Se evaluará en tiempo de instanciación las posibles configuraciones condicionales indicadas, por orden.
            Las de menos orden serán evaluadas si las de orden superior han sido especificadas y no se ha satisfecho sus predicados.
            Si todas ellas fallan o no han sido especificadas, se procederá a utilizar la fija por defecto (en caso de haberla).
            Si no ha sido especificada una por defecto, se considerará la instanciación como fallida
            </summary>
            <param name="mainPredicateToAccomplish">[Opcional] Predicado principal que debe satisfacerse</param>
            <param name="classTypeToInstantiate_MainPredicate">Clase a instanciar, si se satisface el predicado principal</param>
            <param name="paramsToInitializeInstance_MainPredicate">Parámetros para inicializar el objeto, si se satisface el predicado principal</param>
            
            <param name = "firstAlternativePredicate" >[Opcional] Predicado alternativo. Sólo se evaluará si el principal ha sido definido y no se ha satisfecho</param>
            <param name="classTypeToInstantiate_FirstAlternativePredicate">Clase a instanciar, si se satisface el predicado alternativo</param>
            <param name="paramsToInitializeInstance_FirstAlternativePredicate">Parámetros para inicializar el objeto, si se satisface el predicado alternativo</param>
            
            <param name = "secondAlternativePredicate" >[Opcional] Segundo predicado alternativo. Sólo se evaluará si el primero alternativo ha sido definido y no se ha satisfecho</param>
            <param name="classTypeToInstantiate_SecondAlternativePredicate">Clase a instanciar, si se satisface el predicado principal</param>
            <param name="paramsToInitializeInstance_SecondAlternativePredicate">Parámetros para inicializar el objeto, si se satisface el predicado principal</param>
            
            <param name="classTypeToInstantiate_ByDefault">[Opcional] Clase a instanciar en el caso por defecto, si no están definidos o no se cumplen ninguno de los predicados anteriores</param>
            <param name="paramsToInitializeInstance_ByDefault">Parámetros para inicializar el objeto en el caso por defecto</param>
        </member>
        <member name="M:HubblePOS.Factory.FactoryInstantiableData.#ctor(System.Collections.Generic.IList{HubblePOS.Factory.FactoryInstantiableConfigurationItemBase})">
            <summary>
            Constructor para soportar escenario genérico: 
            se especica lista de configuraciones en orden de prioridad, que serán evaluadas en tiempo de instanciación.
            Si la configuración evaluada es de tipo fijo, se procederá a la instanciación con dicha configuración. 
            Si la configuración evaluada es de tipo condicional, sólo en caso de cumplimiento de su predicado se procederá a la instanciación;
            en caso contrario se evaluará el siguiente item de la lista. Si no hay más items se dará por fallida la instanciación
            </summary>
            <param name="configurationItemList">Lista ordenada por prioridad de configuraciones para instanciación (de tipo fijo, condicional, etc.)</param>
        </member>
        <member name="T:HubblePOS.Factory.FactoryInstantiableParamBase">
            <summary>
            Representa la base para los parámetros con los que se configuran las instancias obtenidas mediante factoría
            </summary>
        </member>
        <member name="T:HubblePOS.Factory.FactoryInstantiableParamFactory">
            <summary>
            Parámetro con toda la información sobre la factoría a utilizar por la instancia, caso de ser necesario
            </summary>
        </member>
    </members>
</doc>
